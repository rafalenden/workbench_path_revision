<?php

/**
 * Implements hook_node_load().
 */
function workbench_path_revision_node_load($nodes, $types) {
  $vids = array();
  foreach ($nodes as $node) {
    $vids[] = $node->vid;
  }

  // Add information about path revision to node object.
  $path_revisions = workbench_path_revision_load_multiple($vids);
  foreach ($path_revisions as $langcode => $path_revision) {
    $node = &$nodes[$path_revision['nid']];
    $node->workbench_path_revision[$path_revision['language']] = $path_revision;
    if (entity_language('node', $node) == $path_revision['language']) {
      $node->path['pathauto'] = (bool) $path_revision['pathauto'];
      if (!empty($path_revision['alias'])) {
        $node->path['alias'] = $path_revision['alias'];
      }
    }
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for node_form().
 */
function workbench_path_revision_form_node_form_alter(&$form, $form_state) {
  $node = &$form['#node'];
  $entity_language = entity_language('node', $node);

  // Because workbench_moderation overrides page callback for "node/%node/edit"
  // information about path has to be added here.
  if (!empty($node->workbench_path_revision[$entity_language]['pathauto']) && isset($form['path']['alias'])) {
    $form['path']['pathauto']['#default_value'] = $node->workbench_path_revision[$entity_language]['pathauto'];
  }
  if (!empty($node->workbench_path_revision[$entity_language]['alias']) && isset($form['path']['alias'])) {
    $form['path']['alias']['#default_value'] = $node->workbench_path_revision[$entity_language]['alias'];
  }
}

/**
 * Implements hook_workbench_moderation_transition().
 */
function workbench_path_revision_workbench_moderation_transition($node, $previous_state, $new_state) {
  // New state of node is published so let's save aliases for all translations.
  if ($new_state == 'published') {
    workbench_path_revision_update_live_aliases($node);
  }
}

/**
 * Update aliases of node for all translations when node is being published.
 */
function workbench_path_revision_update_live_aliases($node) {
  $current_node_aliases = db_select('url_alias')
    ->condition('source', 'node/' . $node->nid)
    ->fields('url_alias')
    ->execute()
    ->fetchAllAssoc('language', PDO::FETCH_ASSOC);

  foreach ($node->workbench_path_revision as $langcode => $path_revision) {
    $path = array(
      'language' => $langcode,
      'alias' => $path_revision['alias'],
      'source' => 'node/' . $node->nid,
    );

    if (isset($current_node_aliases[$langcode])) {
      $path['pid'] = $current_node_aliases[$langcode]['pid'];
    }

    // Pathauto is on
    if ($path_revision['pathauto']) {
      $translated_node = clone $node;
      $translated_node->path = $path;
      $options = array(
        'language' => $langcode,
      );

      pathauto_node_update_alias($translated_node, 'update', $options);
    }
    // Pathauto is off
    else {
      path_save($path);
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function workbench_path_revision_node_insert($node) {
  workbench_path_revision_node_update($node);
}

/**
 * Implements hook_node_presave().
 */
function workbench_path_revision_node_presave($node) {
  $node_language = entity_language('node', $node);

  $node->workbench_path_revision[$node_language] = array(
    'pathauto' => isset($node->path['pathauto']) ? $node->path['pathauto'] : 1,
    'alias' => isset($node->path['pathauto']) && empty($node->path['pathauto']) ? $node->path['alias'] : '',
    'language' => $node_language,
  );

  // Block saving URL aliases for draft content.
  if (isset($node->workbench_moderation_state_new) && $node->workbench_moderation_state_new != 'published') {
    $node->path = array('alias' => '', 'pathauto' => 0);
  }
}

/**
 * Implements hook_node_update().
 */
function workbench_path_revision_node_update($node) {
//  dd_box($node->workbench_path_revision, $node->vid);

  foreach ($node->workbench_path_revision as $path_revision) {
    db_merge('workbench_path_revision')
      ->key(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'language' => $path_revision['language'],
      ))
      ->fields(array(
        'nid' => $node->nid,
        'vid' => $node->vid,
        'language' => $path_revision['language'],
        'alias' => $path_revision['alias'],
        'pathauto' => $path_revision['pathauto'],
      ))
      ->execute();
  }
}

/**
 * Implements hook_node_delete().
 */
function workbench_path_revision_node_delete($node) {
  db_delete('workbench_path_revision')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Save the path revision for node.
 *
 * @param $entity
 *   The node object.
 * @param $path_revision
 */
function workbench_path_revision_save($path_revision) {
  db_merge('workbench_path_revision')
    ->key(array(
      'nid' => $path_revision['nid'],
      'vid' => $path_revision['vid'],
      'language' => $path_revision['language'],
    ))
    ->fields(array(
      'nid' => $path_revision['nid'],
      'vid' => $path_revision['vid'],
      'language' => $path_revision['language'],
      'alias' => $path_revision['alias'],
      'pathauto' => $path_revision['pathauto'],
    ))
    ->execute();
}

/**
 * Load a pathauto state for an entity.
 *
 * @param $vid
 *   The node revision ID.
 * @param $conditions
 *   An associative array of conditions on the {workbench_path_revision}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 *
 * @return array
 *   Path revision from DB.
 */
function workbench_path_revision_load($vid, $conditions = array()) {
  $path_revision = workbench_path_revision_load_multiple(array($vid), $conditions);
  return !empty($path_revision) ? reset($path_revision) : FALSE;
}

/**
 * Load a pathauto state for multiple entities.
 *
 * @param $vids
 *   An array of node VDs.
 * @param $conditions
 *   An associative array of conditions on the {workbench_path_revision}
 *   table, where the keys are the database fields and the values are the
 *   values those fields must have. Instead, it is preferable to use
 *   EntityFieldQuery to retrieve a list of entity IDs loadable by
 *   this function.
 *
 * @return array
 *   Array of path revisions from DB.
 */
function workbench_path_revision_load_multiple($vids, $conditions = NULL) {
  $query = db_select('workbench_path_revision', 'pr')
    ->fields('pr')
    ->condition('vid', $vids);

  // Add conditions.
  if ($conditions) {
    foreach ($conditions as $field => $value) {
      $query->condition($field, $value);
    }
  }

  return $query
    ->orderBy('language')
    ->execute()
    ->fetchAllAssoc('language', PDO::FETCH_ASSOC);
}

/**
 * Implements hook_redirect_presave().
 *
 * @see https://drupal.org/node/1945558#comment-7500630
 */
function workbench_path_revision_redirect_presave($redirect) {
  // Remove redirects pointing to aliases of the node it handles.
  $query = db_select('url_alias', 'u')
    ->fields('u', array('alias'));
  $query->join('redirect', 'r', 'u.alias = r.source');
  $query->fields('r', array('rid'));
  $results = $query->execute();

  foreach ($results as $record) {
    db_delete('redirect')
      ->condition('rid', $record->rid)
      ->execute();
  }
}
